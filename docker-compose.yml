version: '3'

services:
  # Web server (Nginx)
  web:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./:/var/www
      - ./uploads:/var/www/uploads
    depends_on:
      - php
      - frontend
    networks:
      - app-network

  # PHP service
  php:
    build:
      context: ./php
    volumes:
      - ./:/var/www
      - ./uploads:/var/www/uploads
    depends_on:
      - db
      - file-storage
    networks:
      - app-network

  # Frontend service (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    networks:
      - app-network

  # Database (MySQL)
  db:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: marido_aluguel
      MYSQL_USER: user
      MYSQL_PASSWORD: senha_user
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  # File storage (MinIO)
  file-storage:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

  # MinIO setup service (creates bucket and sets policies)
  minio-setup:
    image: minio/mc
    depends_on:
      - file-storage
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://file-storage:9000 minio_user minio_password;
      /usr/bin/mc mb myminio/service-requests --ignore-existing;
      /usr/bin/mc policy set public myminio/service-requests;
      exit 0;
      "
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  minio_data: